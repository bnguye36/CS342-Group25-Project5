package sample;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.Event;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.layout.Border;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;
import javafx.stage.Stage;

import java.io.*;
import java.lang.invoke.SerializedLambda;
import java.net.ConnectException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import java.util.function.Consumer;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import static java.lang.Integer.parseInt;
import static javafx.application.Platform.exit;

public class Main extends Application {

    private TextArea s2c = new TextArea();
    private TextArea played = new TextArea();
    private TextArea points = new TextArea();
    private TextArea endGame = new TextArea();
    private Button startGame;
    Game game;

    NetworkConnection conn = createServer();
    HashMap<Integer, Integer> Games = new HashMap<>();
    ArrayList<Integer> clientQue = new ArrayList<>();

    private Parent myServerGui() {

        Button toggle = new Button();
        startGame = new Button("START");
        startGame.setOnAction(Event -> {
            conn.send(99, instructions.instructions()); //made it static
            conn.playRound();
        });
        startGame.setDisable(true);

        TextField input = new TextField();
        s2c.appendText("Clients connected: 0");
        input.setOnAction(event -> {
            conn.setPort(input.getText());

            serverTime();


        });


        Label label = new Label("Choose a port to listen to, then press enter to connect: ");
        played.setPromptText("Keeps track of who played what...");
        points.setPromptText("Keep track of points per round...");
        endGame.setPromptText("Keeps track of who plays again, who quits...");
        input.setPromptText("Enter port to listen to here:");
        VBox root = new VBox(20, label, input, startGame, s2c,played);

        s2c.setMaxHeight(50);
        root.setPrefSize(400, 400);

        return root;
    }

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setScene(new Scene(myServerGui()));
        primaryStage.show();
    }


    public static void main(String[] args) {
        launch(args);
    }

    public void stop() {
        try {
            conn.stop();
        } catch (Exception e) {
            System.out.println("Close failed");
        }
    }



    public myServer createServer(){

        return new myServer(data -> {
            Platform.runLater(() -> {

                if(data.toString().intern() == "new") {

                    String k = s2c.getText();
                    s2c.clear();
                    k = k.substring(0, k.length() - 1);
                    s2c.appendText(String.valueOf(k + conn.clientWorkers.size()));

                    if(conn.clientWorkers.size() == 4){
                        startGame.setDisable(false);
                    }
                    return;
                }

                if(data.toString().intern() == "wait"){
                    try{conn.clientWorkers.get(0).out.writeObject("wait");} catch (Exception e){System.out.println("wait issue");}
                    return;
                }

                if(data.toString().intern() == "quit"){
                    // conn.endGame.appendText("\nClient " + (conn.currPosition+1) + " has quit...");
                    return;
                }
                if(data.toString().intern() == "win"){
                    //conn.send(conn.currPosition, "win");
                    for(int i = 0; i < conn.clientWorkers.size(); ++i){
                        if(i != conn.currPosition) {
                            conn.send(i, String.valueOf(conn.currPosition));
                        }
                    }
                    return;
                }

                if(data.toString().intern() == "reset"){

                    conn.playRound();
                    return;
                }

                if(data.toString().intern() == "over"){

                    conn.send(99, "over");
                    return;
                }


                //if I get here, then data must be an int of the winner
                String _ID = data.toString().intern();
                Integer ID = Integer.valueOf(_ID);
                conn.send(ID, "win");
                for(int i = 0; i < conn.clientWorkers.size(); ++i){
                    if(i != ID) {
                        conn.send(i, "lose");
                    }
                }

            });
        });
    }

    public void serverTime() {

        try{conn.setThread();}
        catch (Exception e){
            System.out.println("Something wrong with server thread\n");
            System.out.println(e.getLocalizedMessage() + "\n");
            System.out.println(e.getMessage() + "\n");
            System.out.println(e.getCause());
        }
    }

}
abstract class NetworkConnection{
    Game game;
    private ArrayList<Integer> clientQue ;
    private int idCounter;
    public Integer currPosition;
    public Consumer<Serializable> callback;
    ArrayList<thread> clientWorkers = new ArrayList<thread>();
    testThread t1;
    updateButtons updater;


    public NetworkConnection(Consumer<Serializable> data){
        this.callback = data;
        idCounter = 0;
        game = new Game();
        System.out.println("Created new connection");
    }

    public void setQue(ArrayList<Integer> clientQue){
        this.clientQue = clientQue;
    }

    public void setThread() throws Exception{
        ServerSocket s = new ServerSocket(getPort());
        t1 = new testThread(s);
        t1.start();
        updater = new updateButtons(this);
        updater.start();
    }

    abstract protected void setPort(String port);
    abstract protected int getPort();
    public void playRound(){

        try{

        game.myWords.setWordsUsed();

        //   for (int i = 0; i < 11; i++) {
        System.out.println("Clearing words");
        game.myWords.clearWords();        //Must clear words to create new words

        System.out.println("Getting three words from file");
        game.myWords.getFromFile();        // Get words from text file

        //Print out the words that were generated
        System.out.println();
        System.out.println("Real words");
        System.out.println("-------------------------------");
        System.out.println(game.word);
        System.out.println(game.word2);
        System.out.println(game.word3);
        System.out.println("-------------------------------");
        System.out.println();
        System.out.println("Scrambled words");
        System.out.println("-------------------------------");
        System.out.println(game.randomizeWord);
        System.out.println(game.randomizeWord2);
        System.out.println(game.randomizeWord3);
        System.out.println("-------------------------------");
          }
        catch (Exception e){System.out.println(e);}

        send(199, game.roundOfWords);

    }

    public void stop() throws Exception{
        for(int kill = 0; kill < clientWorkers.size();++kill) {
            clientWorkers.get(kill).connSocket.close();
        }
    }

    public void send(int x, Serializable data){ //takes id x and sends it info
        try {
            if (x == 99) {//send to everyone
                for(int i = 0; i < clientWorkers.size(); ++i) {
                    clientWorkers.get(i).out.writeObject(data);
                }
                return;
            }
            else if(x == 199){ //include their ids
                for(int i = 0; i < clientWorkers.size(); ++i) {
                    String t = i + "99" + data.toString().intern();
                    clientWorkers.get(i).out.writeObject(t);
                }

            return;
            }

            clientWorkers.get(x).out.writeObject(data);
        }
        catch (Exception e){
            System.out.println("Issue with send Exception");
            System.out.println(e.getLocalizedMessage() + "\n");
            System.out.println(e.getMessage() + "\n");
            System.out.println(e.getCause());
            System.out.println(e.getStackTrace());
        }
    }

    /*----*/
    class testThread extends Thread { // this thread accepts clients and gives each of them their own thread
        public ServerSocket connection;

        testThread(ServerSocket s) {
            this.connection = s;
        }

        public void run() {
            try {


                while (true) {
                        thread t1 = new thread(connection.accept(), idCounter);
                        clientWorkers.add(idCounter, t1);
                        System.out.println("Creating a new thread with id: " + idCounter);
                        System.out.println("Client has connected");
                        callback.accept("new");
                        t1.start();
                        ++idCounter;
                }
            } catch(Exception e){
                System.out.println("Something wrong with testThread try \n");
                System.out.println(e.getLocalizedMessage() + "\n");
                System.out.println(e.getMessage() + "\n");
                System.out.println(e.getCause());
                System.out.println(e.getStackTrace());
            }
        }

    }

    class thread extends Thread{
        //out and socket here for closing and accessing output stream
        public ObjectOutputStream out;
        private ObjectInputStream in;
        Socket connSocket;
        public int id;
        boolean on;

        thread(Socket s, int id){
            this.connSocket = s;
            this.id = id;
            this.on = true;

        }

        public void run() {

            try (
                    ObjectOutputStream out = new ObjectOutputStream(connSocket.getOutputStream());
                    ObjectInputStream  in = new ObjectInputStream(connSocket.getInputStream());
            ) {

                this.out = out;
                this.in = in;
                while (on) {
                    Serializable data = (Serializable) in.readObject();
                    currPosition = this.id;
                    callback.accept(data);
                }
            }
            catch(Exception e){
                System.out.println(e.getLocalizedMessage() + "\n");
                System.out.println(e.getMessage() + "\n");
                System.out.println(e.getCause());
                System.out.println(e.getStackTrace());
            }

        }


    }

}

class updateButtons extends Thread{ //As soon as a client connects MOVED THIS OUT HERE
    // currSize will change so the if statement reads true
    NetworkConnection conn;
    updateButtons(NetworkConnection conn){
        this.conn = conn;
    }

    public synchronized void run(){ // note this synchonized tag is needed.
        try {
            while (true) {

                Thread.sleep(100); //Dont know why but if I dont have this here, this won't work
                if (conn.clientWorkers.size() != 4) {

                      //   conn.send(99, "wait");
                }                                         // I change clientWorkers later(add on to it when another connects)
            }
        }
        catch (Exception e){
            System.out.println("Update Buttons Exception\n" + e + "\n");
        }
    }
}



class myServer extends NetworkConnection {
    private Integer port;


    myServer(Consumer<Serializable> data) {
        super(data);
    }

    protected void setPort(String port) {
        this.port = Integer.valueOf(port);
    }

    protected int getPort() {
        return port;
    }
}

class instructions
{
    /*
     * Function name: instructions()
     * Importance: displays instructions to people who want to play
     * @param: N/A
     * */
     static String instructions()
    {
        String message = "Welcome to our game of scramble! (Probably not like the original game)\n"
                + "In order to play the game, 4 players need to be connected and only four players\n"
                + "Each player has to guess three words that are scrambled. The first player to guess\n"
                + "the three words first in 2 mintues (each round) is the winner. There are infinitely many rounds\n"
                + "the first player to win three rounds is the winner of the game.\n"
                + "If no players guess the three words in 2 mintues, then no one wins.\n";
        return message;
    }
}

/* Class that contains the important stuff for the game */
/*
 * Inner classes include (short description):
 * - Words: Functions and data members that help create the three words that will be used in each round. Each round would have different words (ideally)
 * */
class Game {
    boolean wordsSetBool = false;
    int numWordsUsed = 0;
    String roundOfWords = null;
    String word = null;
    String word2 = null;
    String word3 = null;

    String randomizeWord = null;
    String randomizeWord2 = null;
    String randomizeWord3 = null;

    int numGameWords = 3;        //The number of words each round we decided on
    Words myWords = new Words();

    /*Words class*/
    class Words {
        /* Dictionary size of 30 words */
        public int numWords = 30;

        /*HashMap to keep track if a word was already used to play the game. Don't want any repeats!*/
        public HashMap<Integer, Boolean> wordsUsed = new HashMap<Integer, Boolean>();

        /*
         * Function Name: setWordsUsed()
         * Importance: fills the wordsUsed hashmap with <lineNum, boolean> to show that each line (word) has not been used in the game
         * @param: NONE
         * */
        public void setWordsUsed() {
            for (int i = 1; i <= numWords; i++) {
                wordsUsed.put(i, false);
            }
        }

        /*
         * Function name: allowDuplicates
         * Importance: Function allows the reuse of words in the dictionary, if the dictionary is not big enough/game goes on forever
         * @param: NONE
         * */
        public void allowDuplicates() {
			/* Less than 3 words remaining in dictionary, can reuse words now,
			   but reset the whole dictionary to get a better distribution */
            if (numWords - numWordsUsed <= 2) {
                System.out.println("Allow duplicates");

                numWordsUsed = 0;

                // Set hashmap to false to allow reuse of lines in txt file
                for (int i = 1; i <= numWords; i++) {
                    wordsUsed.put(i, false);
                }
            }

            // Duplicates not allowed as we have enough words
            else {
                return;
            }
        }

        /*
         * Function Name: getFromFile()
         * Importance: gets three words from the file for each round
         * @param: NONE
         * */
        public void getFromFile() throws IOException {

            allowDuplicates();    //Reuse words in dictionary if words run out


            /* Within this block of code, I produce a random line number between 1
             *  and numWords (the number of words in the dictionary)
             */
            //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            Random rand = new Random();
            int min = 1;
            int max = numWords;
            int randNum = rand.nextInt(max - min + 1) + min;
            //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            // Loop through to find a line we haven't used yet
            for (int i = 0; i < numGameWords; i++) {
                //Loop is here so I can make sure the line I get has never been used in the game yet
                //Note, I'm actually just looking at the line numbers, not actually getting the word here
                while (true) {
                    if (wordsUsed.get(randNum) == true)        //line is already used, generate a new random number
                    {
                        randNum = rand.nextInt(max - min + 1) + min;
                    } else        //Never used line, so break out of the while loop
                    {
                        wordsUsed.put(randNum, true);
                        break;
                    }
                }

                /*Stuff to read the text file*/
                // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
                int lineNum = 0;
                BufferedReader br = new BufferedReader(new FileReader("src/sample/FinalDictionary.txt"));
                String line = null;
                // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =


                while ((line = br.readLine()) != null)        //Loop through the file
                {
                    lineNum++;

                    /*Check to see if this is the lineNum we want*/
                    if (lineNum == randNum) {

                        /*If statements to fill the words into the game*/
                        // - - - - - - - - Start IF-ElSE-STATEMENTS - - - - - - -
                        if (word == null) {
                            word = line;
                            randomizeWord = shuffle(word);
                        } else if (word2 == null) {
                            word2 = line;
                            randomizeWord2 = shuffle(word2);
                        } else if (word3 == null) {
                            word3 = line;
                            randomizeWord3 = shuffle(word3);

                            wordsSetBool = true;

                        }

                        // Stop getting words (we already got all three words for a round)
                        else {
                            break;
                        }
                        // - - - - - - - - End IF-ElSE-STATEMENTS - - - - - - -

                        numWordsUsed++;

                    }

                }

                br.close();        //Close file
            }

            // Now we will concatenate them into one giant string to send
            setRound();
        }

        /*
         * Function Name: setRound
         * Importance: Concatenates each of the three randomized words to create a single one for each client
         * @param: NONE
         * */

        public void setRound(){
            roundOfWords = randomizeWord + "99" + randomizeWord2 + "99" + randomizeWord3 + "99" + word + "99" + word2 + "99" + word3;
        }

        /*
         * Function Name: clearWords
         * Importance: Clears words for the next round. Must do this to get new words from the text file
         * @param: NONE
         * */
        public void clearWords() {
            /* Clear these word items to null */
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
            word = null;
            word2 = null;
            word3 = null;

            randomizeWord = null;
            randomizeWord2 = null;
            randomizeWord3 = null;
            // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

            wordsSetBool = false;        // Used for debugging only
        }

        /*
         * Function Name: Shuffle
         * Importance: Shuffles a string
         * @param: (String input)
         * Return value: String - a scrambled string
         * */
        public String shuffle(String input) {

            ArrayList<Character> charAL = new ArrayList<Character>();

            // Store the characters of the string into a ArrayList
            for (char c : input.toCharArray()) {
                charAL.add(c);
            }

            StringBuilder output = new StringBuilder(input.length());        //Use this to build the string

            // Work to randomize the string
            while (charAL.size() != 0) {
                /* Use a random number to randomize the string */
                // - - - - - - - - - - - - - - - - - - - - - - - -
                int min = 0;
                int max = charAL.size() - 1;
                Random rand = new Random();
                int randNum = rand.nextInt((max - min) + 1) + min;
                // - - - - - - - - - - - - - - - - - - - - - - - -

                output.append(charAL.remove(randNum));        //Append to builder to make a scrambled string
            }


            return output.toString();        // Return a scrambled string
        }

    }

}
